"""
There are not a whole lot of 4 digit polygonal numbers, so finding all of them and then trying to combine
them in all permutations of the **type** of polygonals is feasible.

Working with strings is easier here since we don't actually use any numerical operations, only checking substrings.
"""

import itertools
import textwrap
from common import polygonal
from common.tools import to_generator, ibetween


def four_digits(fn):
    """Returns a list of strings of all the four digit numbers generated by iterating the n of fn
    """
    lower = 1000
    upper = 10000
    iterable = to_generator(fn)

    return list(map(str, ibetween(iterable, lower, upper)))


def split_sum(n, size=4):
    """Splits n into equal ints of 4 digits and sums them up

    >>> split_sum("111122223333")
    6666
    """
    return sum(map(int, textwrap.wrap(n, 4)))


def extend_chains(chains, candidates, match_length=2):
    """Returns a list of all the items in chains concatenated with all the items in
    candidates which match the end of the chain to the beginning of the candidate.

    >>> extend_chains(["1234", "5678", "9123"], ["3456", "7890", "4567"])
    ['12343456', '56787890']
    """
    result = []

    for chain in chains:
        last_two = chain[-match_length:]

        for candidate in candidates:
            first_two = candidate[:match_length]

            if last_two == first_two:
                result.append(chain + candidate)

    return result


def find_chain(polygons):
    """Finds all chains which wrap around by calling extend_chains for all polygons in order
    """
    chains = polygons.pop(0)

    for polygon in polygons:
        chains = extend_chains(chains, polygon)
        if not chains:
            break

    return list(filter(wraps_around, chains))


def wraps_around(n, match_length=2):
    """Returns whether the last digits of n are the same as the first
    """
    return n[:match_length] == n[-match_length:]


def solve(polygons):
    for p in itertools.permutations(polygons):
        cycle = find_chain(list(p))

        if cycle:
            return split_sum(cycle[0])


triangles = four_digits(polygonal.triangle)
squares = four_digits(polygonal.square)
pentagonals = four_digits(polygonal.pentagonal)
hexagonals = four_digits(polygonal.hexagonal)
heptagonals = four_digits(polygonal.heptagonal)
octagonals = four_digits(polygonal.octagonal)

if __name__ == "__main__":
    print(solve([
        triangles,
        squares,
        pentagonals,
        hexagonals,
        heptagonals,
        octagonals,
    ]))
