from itertools import count, takewhile, product
from math import prod
from common.primes import gen_primes, is_prime
from common.logging import info


def formula(a, b, n):
    """Returns the value of the formula for a specific n."""
    return n ** 2 + a * n + b


def gen_formula(a, b):
    """Generates an infinite sequence of the formula given a and b for n starting at 0."""
    for n in count(0):
        yield formula(a, b, n)


def formula_primes(a, b):
    """Returns a list of primes generated by the formula."""
    return list(takewhile(lambda n: is_prime(n), gen_formula(a, b)))


def get_candidates(limit):
    """Returns a list of candidate values for a and b.  a and b should always
    be 1, -1, a prime or a negative prime.
    """
    candidate_primes = list(takewhile(lambda n: n <= limit, gen_primes()))

    return [1] + candidate_primes + [-1] + [-x for x in candidate_primes]



def solve(limit):
    max_primes = 0
    coefficients = ()

    for a, b in product(get_candidates(limit), repeat=2):
        primes = formula_primes(a, b)

        if len(primes) > max_primes:
            max_primes = len(primes)
            coefficients = (a, b)

    info(f"a={coefficients[0]}, b={coefficients[1]} yields {max_primes} primes")
    return prod(coefficients)


if __name__ == "__main__":
    print(solve(1000))
