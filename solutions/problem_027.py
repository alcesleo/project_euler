import itertools
from common.primes import gen_primes, is_prime


def formula(a, b, n):
    """Returns the value of the formula for a specific n
    """
    return n ** 2 + a * n + b


def gen_formula(a, b):
    """Generates an infinite sequence of the formula given a and b for n starting at 0
    """
    for n in itertools.count(0):
        yield formula(a, b, n)


def formula_primes(a, b):
    """Returns a list of primes generated by the formula
    """
    return list(itertools.takewhile(lambda n: is_prime(n), gen_formula(a, b)))


def get_candidates(limit):
    """
    Returns a list of candidate values for a and b.
    a and b should always be 1, -1, a prime or a negative prime
    """
    candidate_primes = list(itertools.takewhile(
        lambda n: n <= LIMIT, gen_primes()))

    return [1] + candidate_primes + [-1] + [-x for x in candidate_primes]


LIMIT = 1000

candidates = get_candidates(LIMIT)
maximum_primes = 0
coefficients = ()

for a in candidates:
    for b in candidates:
        primes = formula_primes(a, b)

        if len(primes) > maximum_primes:
            maximum_primes = len(primes)
            coefficients = (a, b)


print(coefficients[0] * coefficients[1])
